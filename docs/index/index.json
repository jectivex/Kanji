{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/init(classpath:libpath:extpath:bootpath:initmemory:maxmemory:jit:headless:verbose:checkjni:reducedsignals:profile:diagnostics:options:compiler:file:line:function:)",
                "title" : "init(classpath: [String]?, libpath: [String]?, extpath: [String]?, bootpath: (path: [String], prepend: Bool?)?, initmemory: String?, maxmemory: String?, jit: Bool, headless: Bool, verbose: (gc: Bool, jni: Bool, classload: Bool), checkJNI: Bool, reducedSignals: Bool, profile: Bool, diagnostics: Bool, options: [String], compiler: String?, file: StaticString, line: UInt, function: StaticString) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/moduleloaders",
                "title" : "var moduleLoaders: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/printstacktraces",
                "title" : "var printStackTraces: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/virtualconstruction",
                "title" : "var virtualConstruction: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/allocobject(_:)",
                "title" : "func allocObject(jclass) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/attach()",
                "title" : "func attach() -> JNIEnvPointer",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callbooleanmethoda(_:methodid:args:)",
                "title" : "func callBooleanMethodA(jobject?, methodID: jmethodID, args: JVM.jvaluelist) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callbooleanmethodv(_:methodid:args:)",
                "title" : "func callBooleanMethodV(jobject?, methodID: jmethodID, args: CVaListPointer) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callbytemethoda(_:methodid:args:)",
                "title" : "func callByteMethodA(jobject?, methodID: jmethodID, args: JVM.jvaluelist) -> jbyte",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callbytemethodv(_:methodid:args:)",
                "title" : "func callByteMethodV(jobject?, methodID: jmethodID, args: CVaListPointer) -> jbyte",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callcharmethoda(_:methodid:args:)",
                "title" : "func callCharMethodA(jobject?, methodID: jmethodID, args: JVM.jvaluelist) -> jchar",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callcharmethodv(_:methodid:args:)",
                "title" : "func callCharMethodV(jobject?, methodID: jmethodID, args: CVaListPointer) -> jchar",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/calldoublemethoda(_:methodid:args:)",
                "title" : "func callDoubleMethodA(jobject?, methodID: jmethodID, args: JVM.jvaluelist) -> jdouble",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/calldoublemethodv(_:methodid:args:)",
                "title" : "func callDoubleMethodV(jobject?, methodID: jmethodID, args: CVaListPointer) -> jdouble",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callfloatmethoda(_:methodid:args:)",
                "title" : "func callFloatMethodA(jobject?, methodID: jmethodID, args: JVM.jvaluelist) -> jfloat",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callfloatmethodv(_:methodid:args:)",
                "title" : "func callFloatMethodV(jobject?, methodID: jmethodID, args: CVaListPointer) -> jfloat",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callintmethoda(_:methodid:args:)",
                "title" : "func callIntMethodA(jobject?, methodID: jmethodID, args: JVM.jvaluelist) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callintmethodv(_:methodid:args:)",
                "title" : "func callIntMethodV(jobject?, methodID: jmethodID, args: CVaListPointer) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/calllongmethoda(_:methodid:args:)",
                "title" : "func callLongMethodA(jobject?, methodID: jmethodID, args: JVM.jvaluelist) -> jlong",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/calllongmethodv(_:methodid:args:)",
                "title" : "func callLongMethodV(jobject?, methodID: jmethodID, args: CVaListPointer) -> jlong",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualbooleanmethoda(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualBooleanMethodA(jobject?, clazz: jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualbooleanmethodv(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualBooleanMethodV(jobject?, clazz: jclass, methodID: jmethodID, args: CVaListPointer) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualbytemethoda(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualByteMethodA(jobject?, clazz: jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jbyte",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualbytemethodv(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualByteMethodV(jobject?, clazz: jclass, methodID: jmethodID, args: CVaListPointer) -> jbyte",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualcharmethoda(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualCharMethodA(jobject?, clazz: jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jchar",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualcharmethodv(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualCharMethodV(jobject?, clazz: jclass, methodID: jmethodID, args: CVaListPointer) -> jchar",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualdoublemethoda(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualDoubleMethodA(jobject?, clazz: jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jdouble",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualdoublemethodv(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualDoubleMethodV(jobject?, clazz: jclass, methodID: jmethodID, args: CVaListPointer) -> jdouble",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualfloatmethoda(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualFloatMethodA(jobject?, clazz: jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jfloat",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualfloatmethodv(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualFloatMethodV(jobject?, clazz: jclass, methodID: jmethodID, args: CVaListPointer) -> jfloat",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualintmethoda(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualIntMethodA(jobject?, clazz: jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualintmethodv(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualIntMethodV(jobject?, clazz: jclass, methodID: jmethodID, args: CVaListPointer) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtuallongmethoda(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualLongMethodA(jobject?, clazz: jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jlong",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtuallongmethodv(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualLongMethodV(jobject?, clazz: jclass, methodID: jmethodID, args: CVaListPointer) -> jlong",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualobjectmethoda(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualObjectMethodA(jobject?, clazz: jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualobjectmethodv(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualObjectMethodV(jobject?, clazz: jclass, methodID: jmethodID, args: CVaListPointer) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualshortmethoda(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualShortMethodA(jobject?, clazz: jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jshort",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualshortmethodv(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualShortMethodV(jobject?, clazz: jclass, methodID: jmethodID, args: CVaListPointer) -> jshort",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualvoidmethoda(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualVoidMethodA(jobject?, clazz: jclass, methodID: jmethodID, args: JVM.jvaluelist)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callnonvirtualvoidmethodv(_:clazz:methodid:args:)",
                "title" : "func callNonvirtualVoidMethodV(jobject?, clazz: jclass, methodID: jmethodID, args: CVaListPointer)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callobjectmethoda(_:methodid:args:)",
                "title" : "func callObjectMethodA(jobject?, methodID: jmethodID, args: JVM.jvaluelist) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callobjectmethodv(_:methodid:args:)",
                "title" : "func callObjectMethodV(jobject?, methodID: jmethodID, args: CVaListPointer) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callshortmethoda(_:methodid:args:)",
                "title" : "func callShortMethodA(jobject?, methodID: jmethodID, args: JVM.jvaluelist) -> jshort",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callshortmethodv(_:methodid:args:)",
                "title" : "func callShortMethodV(jobject?, methodID: jmethodID, args: CVaListPointer) -> jshort",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticbooleanmethoda(_:methodid:args:)",
                "title" : "func callStaticBooleanMethodA(jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticbooleanmethodv(_:methodid:args:)",
                "title" : "func callStaticBooleanMethodV(jclass, methodID: jmethodID, args: CVaListPointer) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticbytemethoda(_:methodid:args:)",
                "title" : "func callStaticByteMethodA(jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jbyte",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticbytemethodv(_:methodid:args:)",
                "title" : "func callStaticByteMethodV(jclass, methodID: jmethodID, args: CVaListPointer) -> jbyte",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticcharmethoda(_:methodid:args:)",
                "title" : "func callStaticCharMethodA(jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jchar",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticcharmethodv(_:methodid:args:)",
                "title" : "func callStaticCharMethodV(jclass, methodID: jmethodID, args: CVaListPointer) -> jchar",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticdoublemethoda(_:methodid:args:)",
                "title" : "func callStaticDoubleMethodA(jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jdouble",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticdoublemethodv(_:methodid:args:)",
                "title" : "func callStaticDoubleMethodV(jclass, methodID: jmethodID, args: CVaListPointer) -> jdouble",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticfloatmethoda(_:methodid:args:)",
                "title" : "func callStaticFloatMethodA(jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jfloat",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticfloatmethodv(_:methodid:args:)",
                "title" : "func callStaticFloatMethodV(jclass, methodID: jmethodID, args: CVaListPointer) -> jfloat",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticintmethoda(_:methodid:args:)",
                "title" : "func callStaticIntMethodA(jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticintmethodv(_:methodid:args:)",
                "title" : "func callStaticIntMethodV(jclass, methodID: jmethodID, args: CVaListPointer) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticlongmethoda(_:methodid:args:)",
                "title" : "func callStaticLongMethodA(jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jlong",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticlongmethodv(_:methodid:args:)",
                "title" : "func callStaticLongMethodV(jclass, methodID: jmethodID, args: CVaListPointer) -> jlong",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticobjectmethoda(_:methodid:args:)",
                "title" : "func callStaticObjectMethodA(jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticobjectmethodv(_:methodid:args:)",
                "title" : "func callStaticObjectMethodV(jclass, methodID: jmethodID, args: CVaListPointer) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticshortmethoda(_:methodid:args:)",
                "title" : "func callStaticShortMethodA(jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jshort",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticshortmethodv(_:methodid:args:)",
                "title" : "func callStaticShortMethodV(jclass, methodID: jmethodID, args: CVaListPointer) -> jshort",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticvoidmethoda(_:methodid:args:)",
                "title" : "func callStaticVoidMethodA(jclass, methodID: jmethodID, args: JVM.jvaluelist)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callstaticvoidmethodv(_:methodid:args:)",
                "title" : "func callStaticVoidMethodV(jclass, methodID: jmethodID, args: CVaListPointer)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callvoidmethoda(_:methodid:args:)",
                "title" : "func callVoidMethodA(jobject?, methodID: jmethodID, args: JVM.jvaluelist)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/callvoidmethodv(_:methodid:args:)",
                "title" : "func callVoidMethodV(jobject?, methodID: jmethodID, args: CVaListPointer)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/checked(_:file:line:function:)",
                "title" : "func checked<T>(() throws -> T, file: String, line: Int, function: String) throws -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/construct(_:)",
                "title" : "func construct<T>(jobject?) -> T?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/defineclass(_:loader:buf:len:)",
                "title" : "func defineClass(JVM.cstr, loader: jobject?, buf: UnsafePointer<jbyte>, len: jsize) -> jclass?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/deleteglobalref(_:)",
                "title" : "func deleteGlobalRef(jobject?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/deletelocalref(_:)",
                "title" : "func deleteLocalRef(jobject?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/deleteweakglobalref(_:)",
                "title" : "func deleteWeakGlobalRef(jweak)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/ensurelocalcapacity(_:)",
                "title" : "func ensureLocalCapacity(jint) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/exceptioncheck()",
                "title" : "func exceptionCheck() -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/exceptionclear()",
                "title" : "func exceptionClear()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/exceptiondescribe()",
                "title" : "func exceptionDescribe()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/exceptionoccurred()",
                "title" : "func exceptionOccurred() -> jthrowable?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/findclass(_:)",
                "title" : "func findClass(JVM.cstr) -> jclass?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/fromjavastring(_:)",
                "title" : "func fromJavaString(jstring?) -> String?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/fromreflectedfield(_:)",
                "title" : "func fromReflectedField(jobject?) -> jfieldID?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/fromreflectedmethod(_:)",
                "title" : "func fromReflectedMethod(jobject?) -> jmethodID?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getarraylength(_:)",
                "title" : "func getArrayLength(jarray) -> jsize",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getbooleanarrayelements(_:iscopy:)",
                "title" : "func getBooleanArrayElements(jbooleanArray, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafeMutablePointer<jboolean>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getbooleanarrayregion(_:start:len:buf:)",
                "title" : "func getBooleanArrayRegion(jbooleanArray, start: jsize, len: jsize, buf: UnsafeMutablePointer<jboolean>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getbooleanfield(_:fieldid:)",
                "title" : "func getBooleanField(jobject?, fieldID: jfieldID) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getbytearrayelements(_:iscopy:)",
                "title" : "func getByteArrayElements(jbyteArray, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafeMutablePointer<jbyte>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getbytearrayregion(_:start:len:buf:)",
                "title" : "func getByteArrayRegion(jbyteArray, start: jsize, len: jsize, buf: UnsafeMutablePointer<jbyte>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getbytefield(_:fieldid:)",
                "title" : "func getByteField(jobject?, fieldID: jfieldID) -> jbyte",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getchararrayelements(_:iscopy:)",
                "title" : "func getCharArrayElements(jcharArray, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafeMutablePointer<jchar>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getchararrayregion(_:start:len:buf:)",
                "title" : "func getCharArrayRegion(jcharArray, start: jsize, len: jsize, buf: UnsafeMutablePointer<jchar>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getcharfield(_:fieldid:)",
                "title" : "func getCharField(jobject?, fieldID: jfieldID) -> jchar",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getdirectbufferaddress(_:)",
                "title" : "func getDirectBufferAddress(jobject?) -> UnsafeMutableRawPointer?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getdirectbuffercapacity(_:)",
                "title" : "func getDirectBufferCapacity(jobject?) -> jlong",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getdoublearrayelements(_:iscopy:)",
                "title" : "func getDoubleArrayElements(jdoubleArray, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafeMutablePointer<jdouble>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getdoublearrayregion(_:start:len:buf:)",
                "title" : "func getDoubleArrayRegion(jdoubleArray, start: jsize, len: jsize, buf: UnsafeMutablePointer<jdouble>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getdoublefield(_:fieldid:)",
                "title" : "func getDoubleField(jobject?, fieldID: jfieldID) -> jdouble",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getfieldid(_:name:sig:)",
                "title" : "func getFieldID(jclass, name: JVM.cstr, sig: JVM.cstr) -> jfieldID?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getfloatarrayelements(_:iscopy:)",
                "title" : "func getFloatArrayElements(jfloatArray, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafeMutablePointer<jfloat>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getfloatarrayregion(_:start:len:buf:)",
                "title" : "func getFloatArrayRegion(jfloatArray, start: jsize, len: jsize, buf: UnsafeMutablePointer<jfloat>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getfloatfield(_:fieldid:)",
                "title" : "func getFloatField(jobject?, fieldID: jfieldID) -> jfloat",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getintarrayelements(_:iscopy:)",
                "title" : "func getIntArrayElements(jintArray, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafeMutablePointer<jint>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getintarrayregion(_:start:len:buf:)",
                "title" : "func getIntArrayRegion(jintArray, start: jsize, len: jsize, buf: UnsafeMutablePointer<jint>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getintfield(_:fieldid:)",
                "title" : "func getIntField(jobject?, fieldID: jfieldID) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getjavavm(_:)",
                "title" : "func getJavaVM(UnsafeMutablePointer<JVM.JavaVMPtr?>!) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getlongarrayelements(_:iscopy:)",
                "title" : "func getLongArrayElements(jlongArray, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafeMutablePointer<jlong>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getlongarrayregion(_:start:len:buf:)",
                "title" : "func getLongArrayRegion(jlongArray, start: jsize, len: jsize, buf: UnsafeMutablePointer<jlong>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getlongfield(_:fieldid:)",
                "title" : "func getLongField(jobject?, fieldID: jfieldID) -> jlong",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getmethodid(_:name:sig:)",
                "title" : "func getMethodID(jclass, name: JVM.cstr, sig: JVM.cstr) -> jmethodID?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getobjectarrayelement(_:index:)",
                "title" : "func getObjectArrayElement(jobjectArray, index: jsize) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getobjectclass(_:)",
                "title" : "func getObjectClass(jobject?) -> jclass?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getobjectfield(_:fieldid:)",
                "title" : "func getObjectField(jobject?, fieldID: jfieldID) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getobjectreftype(_:)",
                "title" : "func getObjectRefType(jobject?) -> jobjectRefType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getprimitivearraycritical(_:iscopy:)",
                "title" : "func getPrimitiveArrayCritical(jarray, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafeMutableRawPointer?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getshortarrayelements(_:iscopy:)",
                "title" : "func getShortArrayElements(jshortArray, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafeMutablePointer<jshort>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getshortarrayregion(_:start:len:buf:)",
                "title" : "func getShortArrayRegion(jshortArray, start: jsize, len: jsize, buf: UnsafeMutablePointer<jshort>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getshortfield(_:fieldid:)",
                "title" : "func getShortField(jobject?, fieldID: jfieldID) -> jshort",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticbooleanfield(_:fieldid:)",
                "title" : "func getStaticBooleanField(jclass, fieldID: jfieldID) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticbytefield(_:fieldid:)",
                "title" : "func getStaticByteField(jclass, fieldID: jfieldID) -> jbyte",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticcharfield(_:fieldid:)",
                "title" : "func getStaticCharField(jclass, fieldID: jfieldID) -> jchar",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticdoublefield(_:fieldid:)",
                "title" : "func getStaticDoubleField(jclass, fieldID: jfieldID) -> jdouble",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticfieldid(_:name:sig:)",
                "title" : "func getStaticFieldID(jclass, name: JVM.cstr, sig: JVM.cstr) -> jfieldID?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticfloatfield(_:fieldid:)",
                "title" : "func getStaticFloatField(jclass, fieldID: jfieldID) -> jfloat",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticintfield(_:fieldid:)",
                "title" : "func getStaticIntField(jclass, fieldID: jfieldID) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticlongfield(_:fieldid:)",
                "title" : "func getStaticLongField(jclass, fieldID: jfieldID) -> jlong",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticmethodid(_:name:sig:)",
                "title" : "func getStaticMethodID(jclass, name: JVM.cstr, sig: JVM.cstr) -> jmethodID?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticobjectfield(_:fieldid:)",
                "title" : "func getStaticObjectField(jclass, fieldID: jfieldID) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstaticshortfield(_:fieldid:)",
                "title" : "func getStaticShortField(jclass, fieldID: jfieldID) -> jshort",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstringchars(_:iscopy:)",
                "title" : "func getStringChars(jstring, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafePointer<jchar>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstringcritical(_:iscopy:)",
                "title" : "func getStringCritical(jstring, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafePointer<jchar>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstringlength(_:)",
                "title" : "func getStringLength(jstring) -> jsize",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstringregion(_:start:len:buf:)",
                "title" : "func getStringRegion(jstring, start: jsize, len: jsize, buf: UnsafeMutablePointer<jchar>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstringutfchars(_:iscopy:)",
                "title" : "func getStringUTFChars(jstring, isCopy: UnsafeMutablePointer<jboolean>) -> UnsafePointer<Int8>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstringutflength(_:)",
                "title" : "func getStringUTFLength(jstring) -> jsize",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getstringutfregion(_:start:len:buf:)",
                "title" : "func getStringUTFRegion(jstring, start: jsize, len: jsize, buf: UnsafeMutablePointer<Int8>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getsuperclass(_:)",
                "title" : "func getSuperclass(jclass) -> jclass?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/getversion()",
                "title" : "func getVersion() -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/isassignablefrom(_:sup:)",
                "title" : "func isAssignableFrom(jclass, sup: jclass) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/isinstanceof(_:clazz:)",
                "title" : "func isInstanceOf(jobject?, clazz: jclass) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/issameobject(_:_:)",
                "title" : "func isSameObject(jobject?, jobject?) -> jboolean",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/monitorenter(_:)",
                "title" : "func monitorEnter(jobject?) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/monitorexit(_:)",
                "title" : "func monitorExit(jobject?) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newbooleanarray(_:)",
                "title" : "func newBooleanArray(jsize) -> jbooleanArray?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newbytearray(_:)",
                "title" : "func newByteArray(jsize) -> jbyteArray?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newchararray(_:)",
                "title" : "func newCharArray(jsize) -> jcharArray?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newdirectbytebuffer(_:capacity:)",
                "title" : "func newDirectByteBuffer(UnsafeMutableRawPointer, capacity: jlong) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newdoublearray(_:)",
                "title" : "func newDoubleArray(jsize) -> jdoubleArray?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newfloatarray(_:)",
                "title" : "func newFloatArray(jsize) -> jfloatArray?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newglobalref(_:)",
                "title" : "func newGlobalRef(jobject?) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newintarray(_:)",
                "title" : "func newIntArray(jsize) -> jintArray?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newlocalref(_:)",
                "title" : "func newLocalRef(jobject?) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newlongarray(_:)",
                "title" : "func newLongArray(jsize) -> jlongArray?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newobjecta(_:methodid:args:)",
                "title" : "func newObjectA(jclass, methodID: jmethodID, args: JVM.jvaluelist) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newobjectarray(_:clazz:init:)",
                "title" : "func newObjectArray(jsize, clazz: jclass, init: jobject?) -> jobjectArray?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newobjectv(_:methodid:args:)",
                "title" : "func newObjectV(jclass, methodID: jmethodID, args: CVaListPointer) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newshortarray(_:)",
                "title" : "func newShortArray(jsize) -> jshortArray?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newstring(_:len:)",
                "title" : "func newString(UnsafePointer<jchar>, len: jsize) -> jstring?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newstringutf(_:)",
                "title" : "func newStringUTF(JVM.cstr) -> jstring?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/newweakglobalref(_:)",
                "title" : "func newWeakGlobalRef(jobject?) -> jweak?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/popexception(file:line:function:)",
                "title" : "func popException(file: String, line: Int, function: String) -> KanjiException?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/poplocalframe(_:)",
                "title" : "func popLocalFrame(jobject?) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/printstacktrace()",
                "title" : "func printStackTrace()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/pushlocalframe(_:)",
                "title" : "func pushLocalFrame(jint) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/registernatives(_:methods:nmethods:)",
                "title" : "func registerNatives(jclass, methods: UnsafePointer<JNINativeMethod>, nMethods: jint) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releasebooleanarrayelements(_:elems:mode:)",
                "title" : "func releaseBooleanArrayElements(jbooleanArray, elems: UnsafeMutablePointer<jboolean>, mode: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releasebytearrayelements(_:elems:mode:)",
                "title" : "func releaseByteArrayElements(jbyteArray, elems: UnsafeMutablePointer<jbyte>, mode: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releasechararrayelements(_:elems:mode:)",
                "title" : "func releaseCharArrayElements(jcharArray, elems: UnsafeMutablePointer<jchar>, mode: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releasedoublearrayelements(_:elems:mode:)",
                "title" : "func releaseDoubleArrayElements(jdoubleArray, elems: UnsafeMutablePointer<jdouble>, mode: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releasefloatarrayelements(_:elems:mode:)",
                "title" : "func releaseFloatArrayElements(jfloatArray, elems: UnsafeMutablePointer<jfloat>, mode: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releaseintarrayelements(_:elems:mode:)",
                "title" : "func releaseIntArrayElements(jintArray, elems: UnsafeMutablePointer<jint>, mode: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releaselongarrayelements(_:elems:mode:)",
                "title" : "func releaseLongArrayElements(jlongArray, elems: UnsafeMutablePointer<jlong>, mode: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releaseprimitivearraycritical(_:carray:mode:)",
                "title" : "func releasePrimitiveArrayCritical(jarray, carray: UnsafeMutableRawPointer, mode: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releaseshortarrayelements(_:elems:mode:)",
                "title" : "func releaseShortArrayElements(jshortArray, elems: UnsafeMutablePointer<jshort>, mode: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releasestringchars(_:chars:)",
                "title" : "func releaseStringChars(jstring, chars: UnsafePointer<jchar>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releasestringcritical(_:cstring:)",
                "title" : "func releaseStringCritical(jstring, cstring: UnsafePointer<jchar>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/releasestringutfchars(_:chars:)",
                "title" : "func releaseStringUTFChars(jstring, chars: UnsafePointer<Int8>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setbooleanarrayregion(_:start:len:buf:)",
                "title" : "func setBooleanArrayRegion(jbooleanArray, start: jsize, len: jsize, buf: UnsafePointer<jboolean>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setbooleanfield(_:fieldid:val:)",
                "title" : "func setBooleanField(jobject?, fieldID: jfieldID, val: jboolean)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setbytearrayregion(_:start:len:buf:)",
                "title" : "func setByteArrayRegion(jbyteArray, start: jsize, len: jsize, buf: UnsafePointer<jbyte>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setbytefield(_:fieldid:val:)",
                "title" : "func setByteField(jobject?, fieldID: jfieldID, val: jbyte)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setchararrayregion(_:start:len:buf:)",
                "title" : "func setCharArrayRegion(jcharArray, start: jsize, len: jsize, buf: UnsafePointer<jchar>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setcharfield(_:fieldid:val:)",
                "title" : "func setCharField(jobject?, fieldID: jfieldID, val: jchar)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setdoublearrayregion(_:start:len:buf:)",
                "title" : "func setDoubleArrayRegion(jdoubleArray, start: jsize, len: jsize, buf: UnsafePointer<jdouble>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setdoublefield(_:fieldid:val:)",
                "title" : "func setDoubleField(jobject?, fieldID: jfieldID, val: jdouble)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setfloatarrayregion(_:start:len:buf:)",
                "title" : "func setFloatArrayRegion(jfloatArray, start: jsize, len: jsize, buf: UnsafePointer<jfloat>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setfloatfield(_:fieldid:val:)",
                "title" : "func setFloatField(jobject?, fieldID: jfieldID, val: jfloat)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setintarrayregion(_:start:len:buf:)",
                "title" : "func setIntArrayRegion(jintArray, start: jsize, len: jsize, buf: UnsafePointer<jint>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setintfield(_:fieldid:val:)",
                "title" : "func setIntField(jobject?, fieldID: jfieldID, val: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setlongarrayregion(_:start:len:buf:)",
                "title" : "func setLongArrayRegion(jlongArray, start: jsize, len: jsize, buf: UnsafePointer<jlong>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setlongfield(_:fieldid:val:)",
                "title" : "func setLongField(jobject?, fieldID: jfieldID, val: jlong)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setobjectarrayelement(_:index:val:)",
                "title" : "func setObjectArrayElement(jobjectArray, index: jsize, val: jobject?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setobjectfield(_:fieldid:val:)",
                "title" : "func setObjectField(jobject?, fieldID: jfieldID, val: jobject?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setshortarrayregion(_:start:len:buf:)",
                "title" : "func setShortArrayRegion(jshortArray, start: jsize, len: jsize, buf: UnsafePointer<jshort>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setshortfield(_:fieldid:val:)",
                "title" : "func setShortField(jobject?, fieldID: jfieldID, val: jshort)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setstaticbooleanfield(_:fieldid:val:)",
                "title" : "func setStaticBooleanField(jclass, fieldID: jfieldID, val: jboolean)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setstaticbytefield(_:fieldid:val:)",
                "title" : "func setStaticByteField(jclass, fieldID: jfieldID, val: jbyte)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setstaticcharfield(_:fieldid:val:)",
                "title" : "func setStaticCharField(jclass, fieldID: jfieldID, val: jchar)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setstaticdoublefield(_:fieldid:val:)",
                "title" : "func setStaticDoubleField(jclass, fieldID: jfieldID, val: jdouble)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setstaticfloatfield(_:fieldid:val:)",
                "title" : "func setStaticFloatField(jclass, fieldID: jfieldID, val: jfloat)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setstaticintfield(_:fieldid:val:)",
                "title" : "func setStaticIntField(jclass, fieldID: jfieldID, val: jint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setstaticlongfield(_:fieldid:val:)",
                "title" : "func setStaticLongField(jclass, fieldID: jfieldID, val: jlong)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setstaticobjectfield(_:fieldid:val:)",
                "title" : "func setStaticObjectField(jclass, fieldID: jfieldID, val: jobject?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/setstaticshortfield(_:fieldid:val:)",
                "title" : "func setStaticShortField(jclass, fieldID: jfieldID, val: jshort)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/throwexception(_:)",
                "title" : "func throwException(jthrowable) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/throwexception(file:line:function:)",
                "title" : "func throwException(file: String, line: Int, function: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/thrownew(_:msg:)",
                "title" : "func throwNew(jclass, msg: JVM.cstr) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/tojstring(_:)",
                "title" : "func toJString(String) -> jstring?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/toreflectedfield(_:fieldid:isstatic:)",
                "title" : "func toReflectedField(jclass, fieldID: jfieldID, isStatic: jboolean) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/toreflectedmethod(_:methodid:isstatic:)",
                "title" : "func toReflectedMethod(jclass, methodID: jmethodID, isStatic: jboolean) -> jobject?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/unregisternatives(_:)",
                "title" : "func unregisterNatives(jclass) -> jint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/withlocalframe(size:f:)-25w8a",
                "title" : "func withLocalFrame<T>(size: jint, f: () throws -> T?) rethrows -> T?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/withlocalframe(size:f:)-9j05h",
                "title" : "func withLocalFrame<T>(size: jint, f: () throws -> T) rethrows -> T",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/javavmptr",
                "title" : "JVM.JavaVMPtr",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/cstr",
                "title" : "JVM.cstr",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/jvaluelist",
                "title" : "JVM.jvaluelist",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/checkjnidefault",
                "title" : "static let checkJNIDefault: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/sharedjvm",
                "title" : "static var sharedJVM: JVM!",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/sharedjvmcreator",
                "title" : "static var sharedJVMCreator: () throws -> (JVM)",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/usejit",
                "title" : "static let useJIT: Bool",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvm\/jsig(_:args:)",
                "title" : "static func jsig<T>(T, args: [JSig]) -> String",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/javaclass",
                    "title" : "static var javaClass: jclass!",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/jvm",
                    "title" : "static var jvm: JVM",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/accessor(_:type:file:line:function:)",
                    "title" : "static func accessor<T>(String, type: T, file: String, line: Int, function: String) -> (getter: (JRef) -> T.JNIType, setter: (JRef, T.JNIType) -> ())",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-28a58",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-2sp6",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-31mxr",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-36z7k",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-3kkg5",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType, A21.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-3nnas",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-3xi1q",
                    "title" : "static func constructor<A0, A1>((A0, A1), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-3ylc6",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-4e5dq",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-59l8e",
                    "title" : "static func constructor<A0, A1, A2, A3>((A0, A1, A2, A3), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-5fig4",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-6awjo",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-6rfzc",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-7epey",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7>((A0, A1, A2, A3, A4, A5, A6, A7), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-7o9qa",
                    "title" : "static func constructor<A0, A1, A2>((A0, A1, A2), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-822om",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6>((A0, A1, A2, A3, A4, A5, A6), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-85r5s",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-8ieta",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8>((A0, A1, A2, A3, A4, A5, A6, A7, A8), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-98epj",
                    "title" : "static func constructor<A0>((A0), file: String, line: Int, function: String) -> (A0.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-9cgsp",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-rizx",
                    "title" : "static func constructor<A0, A1, A2, A3, A4>((A0, A1, A2, A3, A4), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(_:file:line:function:)-vy72",
                    "title" : "static func constructor<A0, A1, A2, A3, A4, A5>((A0, A1, A2, A3, A4, A5), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType) throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/constructor(file:line:function:)",
                    "title" : "static func constructor(file: String, line: Int, function: String) -> () throws -> jobject",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/findmethod(_:name:sig:)",
                    "title" : "static func findMethod(jclass, name: String, sig: String) -> jmethodID?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/findstaticmethod(_:name:sig:)",
                    "title" : "static func findStaticMethod(jclass, name: String, sig: String) -> jmethodID?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-1g09",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-22052",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-2szn8",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-2yf3j",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-329bo",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-3p5zt",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-3rafz",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-4ilb9",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType, A21.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-4spah",
                    "title" : "static func invoker<T, A0>(String, cls: jclass?, returns: T, arguments: (A0), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-5ipoa",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-5j5yk",
                    "title" : "static func invoker<T, A0, A1>(String, cls: jclass?, returns: T, arguments: (A0, A1), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-65o6r",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-66dty",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-6myol",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-7r169",
                    "title" : "static func invoker<T, A0, A1, A2, A3>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-8bww",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-8ihr1",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-8q9i",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-91juv",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-98zll",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-99esc",
                    "title" : "static func invoker<T, A0, A1, A2>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:arguments:file:line:function:)-9zf8e",
                    "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/invoker(_:cls:returns:file:line:function:)",
                    "title" : "static func invoker<T>(String, cls: jclass?, returns: T, file: String, line: Int, function: String) -> (JRef) -> () throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/rethrow(_:_:)",
                    "title" : "static func rethrow<T>(KanjiException?, () throws -> T) throws -> T",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/saccessor(_:type:file:line:function:)",
                    "title" : "static func saccessor<T>(String, type: T, file: String, line: Int, function: String) -> (getter: () -> T.JNIType, setter: (T.JNIType) -> ())",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-1ddjl",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-1sc9",
                    "title" : "static func svoker<T, A0, A1>(String, cls: jclass?, returns: T, arguments: (A0, A1), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-2va49",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-3a5n0",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-3bzqb",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-3drl8",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-3gwcd",
                    "title" : "static func svoker<T, A0, A1, A2, A3>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-3wfsk",
                    "title" : "static func svoker<T, A0>(String, cls: jclass?, returns: T, arguments: (A0), file: String, line: Int, function: String) -> (A0.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-3yyku",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-488qg",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-4xu3b",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-5jf9p",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-5oygn",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-5u9jp",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-65738",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType, A21.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-886a9",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-89jbr",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-8acwe",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-8prdb",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-8tc42",
                    "title" : "static func svoker<T, A0, A1, A2>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-9msmb",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:arguments:file:line:function:)-viqw",
                    "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType) throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/svoker(_:cls:returns:file:line:function:)",
                    "title" : "static func svoker<T>(String, cls: jclass?, returns: T, file: String, line: Int, function: String) -> () throws -> T.JNIType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/jvm\/swallow(_:_:_:file:line:function:)",
                    "title" : "static func swallow<T>(KanjiException?, () -> T, T, file: String, line: Int, function: String) -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/kanjivm\/jvm\/jinvocable-implementations",
                "title" : "JInvocable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/kanjivm\/jvm",
            "title" : "JVM",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/nullterminatedcstring\/init(_:)",
                "title" : "init(String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/nullterminatedcstring\/buffer",
                "title" : "let buffer: UnsafeMutablePointer<Int8>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/nullterminatedcstring\/length",
                "title" : "let length: Int",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/kanjivm\/nullterminatedcstring",
            "title" : "NullTerminatedCString",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/flatmappable\/wrapped",
                "title" : "Wrapped",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/flatmappable\/flatmap(_:)",
                "title" : "func flatMap<U>((Self.Wrapped) throws -> U?) rethrows -> U?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/kanjivm\/flatmappable",
            "title" : "FlatMappable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/kanjivm\/javaobject\/javaclass-6sja7",
                        "title" : "static var javaClass: jclass!",
                        "type" : "property"
                      }
                    ],
                    "title" : "JavaObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/kanjivm\/jinvocable\/javaclass",
                "title" : "static var javaClass: jclass!",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/kanjivm\/javaobject\/jvm",
                        "title" : "static var jvm: JVM",
                        "type" : "property"
                      }
                    ],
                    "title" : "JavaObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/kanjivm\/jinvocable\/jvm",
                "title" : "static var jvm: JVM",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/accessor(_:type:file:line:function:)",
                "title" : "static func accessor<T>(String, type: T, file: String, line: Int, function: String) -> (getter: (JRef) -> T.JNIType, setter: (JRef, T.JNIType) -> ())",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-1l43g",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8>((A0, A1, A2, A3, A4, A5, A6, A7, A8), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-2528e",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-28pki",
                "title" : "static func constructor<A0, A1, A2, A3, A4>((A0, A1, A2, A3, A4), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-2n5et",
                "title" : "static func constructor<A0, A1>((A0, A1), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-31gby",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-50np3",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-5bjw",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-5g4dl",
                "title" : "static func constructor<A0, A1, A2, A3>((A0, A1, A2, A3), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-5jbt7",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-5mtzq",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType, A21.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-6c3dn",
                "title" : "static func constructor<A0, A1, A2>((A0, A1, A2), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-6cxcc",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-6o7qv",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-6xlx7",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6>((A0, A1, A2, A3, A4, A5, A6), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-71hsx",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-777nh",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-7j7iq",
                "title" : "static func constructor<A0>((A0), file: String, line: Int, function: String) -> (A0.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-82wau",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-8mgn4",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-9fagc",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7>((A0, A1, A2, A3, A4, A5, A6, A7), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-9yeb3",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9>((A0, A1, A2, A3, A4, A5, A6, A7, A8, A9), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(_:file:line:function:)-pm9e",
                "title" : "static func constructor<A0, A1, A2, A3, A4, A5>((A0, A1, A2, A3, A4, A5), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/constructor(file:line:function:)",
                "title" : "static func constructor(file: String, line: Int, function: String) -> () throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/findmethod(_:name:sig:)",
                "title" : "static func findMethod(jclass, name: String, sig: String) -> jmethodID?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/findstaticmethod(_:name:sig:)",
                "title" : "static func findStaticMethod(jclass, name: String, sig: String) -> jmethodID?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-1mscs",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-1oac9",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-1py3k",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-205n",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-2fj6g",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-2gdkp",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-2oi4z",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-2pvzm",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-2vtmu",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-3cdgs",
                "title" : "static func invoker<T, A0>(String, cls: jclass?, returns: T, arguments: (A0), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-3gn5j",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-4o8f3",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType, A21.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-4qqfm",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-4yl32",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-5m9a1",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-67ng8",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-6f6ch",
                "title" : "static func invoker<T, A0, A1>(String, cls: jclass?, returns: T, arguments: (A0, A1), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-77qy8",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-8muwy",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-9bnds",
                "title" : "static func invoker<T, A0, A1, A2>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-fvvf",
                "title" : "static func invoker<T, A0, A1, A2, A3>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:arguments:file:line:function:)-mh22",
                "title" : "static func invoker<T, A0, A1, A2, A3, A4, A5, A6, A7>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7), file: String, line: Int, function: String) -> (JRef) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/invoker(_:cls:returns:file:line:function:)",
                "title" : "static func invoker<T>(String, cls: jclass?, returns: T, file: String, line: Int, function: String) -> (JRef) -> () throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/rethrow(_:_:)",
                "title" : "static func rethrow<T>(KanjiException?, () throws -> T) throws -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/saccessor(_:type:file:line:function:)",
                "title" : "static func saccessor<T>(String, type: T, file: String, line: Int, function: String) -> (getter: () -> T.JNIType, setter: (T.JNIType) -> ())",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-10htd",
                "title" : "static func svoker<T, A0>(String, cls: jclass?, returns: T, arguments: (A0), file: String, line: Int, function: String) -> (A0.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-12zbz",
                "title" : "static func svoker<T, A0, A1>(String, cls: jclass?, returns: T, arguments: (A0, A1), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-1ivex",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-1x578",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-2zt0c",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-4hkiv",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-4nakj",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-4o3di",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-5cd5l",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-6b9bc",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-6doh3",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-70j9k",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-7nn4v",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-7qbeq",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-7yotw",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-8dssu",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-961hp",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-9946k",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-9h25i",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType, A12.JNIType, A13.JNIType, A14.JNIType, A15.JNIType, A16.JNIType, A17.JNIType, A18.JNIType, A19.JNIType, A20.JNIType, A21.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-9wvcb",
                "title" : "static func svoker<T, A0, A1, A2>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-lx78",
                "title" : "static func svoker<T, A0, A1, A2, A3>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:arguments:file:line:function:)-mqfe",
                "title" : "static func svoker<T, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>(String, cls: jclass?, returns: T, arguments: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), file: String, line: Int, function: String) -> (A0.JNIType, A1.JNIType, A2.JNIType, A3.JNIType, A4.JNIType, A5.JNIType, A6.JNIType, A7.JNIType, A8.JNIType, A9.JNIType, A10.JNIType, A11.JNIType) throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/svoker(_:cls:returns:file:line:function:)",
                "title" : "static func svoker<T>(String, cls: jclass?, returns: T, file: String, line: Int, function: String) -> () throws -> T.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jinvocable\/swallow(_:_:_:file:line:function:)",
                "title" : "static func swallow<T>(KanjiException?, () -> T, T, file: String, line: Int, function: String) -> T",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/kanjivm\/jinvocable",
            "title" : "JInvocable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jnominal\/jnibasetype",
                "title" : "JNIBaseType",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jnominal\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/kanjivm\/jprimitive\/empty()",
                        "title" : "static func empty() -> Self.JNIType",
                        "type" : "method"
                      }
                    ],
                    "title" : "JPrimitive Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/kanjivm\/jnominal\/empty()",
                "title" : "static func empty() -> Self.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jnominal\/getfield(_:)",
                "title" : "static func getField(JNIEnvPointer) -> (jfieldID) -> (jobject) -> Self.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jnominal\/getstaticfield(_:)",
                "title" : "static func getStaticField(JNIEnvPointer) -> (jfieldID) -> (jclass) -> Self.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jnominal\/setfield(_:)",
                "title" : "static func setField(JNIEnvPointer) -> (jfieldID) -> (jobject) -> (Self.JNIType) -> Void",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jnominal\/setstaticfield(_:)",
                "title" : "static func setStaticField(JNIEnvPointer) -> (jfieldID) -> (jclass) -> (Self.JNIType) -> Void",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/kanjivm\/jnominal",
            "title" : "JNominal",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jprimitive\/arraytype",
                "title" : "ArrayType",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jprimitive\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jprimitive\/jnitype",
                "title" : "static var jniType: Self.JNIType",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jprimitive\/createarray(_:)",
                "title" : "static func createArray(JNIEnvPointer) -> ([Self]) -> Self.ArrayType?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jprimitive\/getarray(_:)",
                "title" : "static func getArray(JNIEnvPointer) -> (jarray) -> [Self]?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/kanjivm\/jprimitive",
            "title" : "JPrimitive",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jref\/jobj",
                "title" : "var jobj: jobject",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jref\/synchronized(f:)",
                "title" : "func synchronized<T>(f: () throws -> T) rethrows -> T",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/kanjivm\/jref",
            "title" : "JRef",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/kanjivm\/javaobject\/jsig",
                        "title" : "var jsig: String",
                        "type" : "property"
                      }
                    ],
                    "title" : "JavaObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/kanjivm\/jsig\/jsig",
                "title" : "var jsig: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/kanjivm\/jsig",
            "title" : "JSig",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jtype\/jnitype-swift.associatedtype",
                "title" : "JNIType",
                "type" : "associatedtype"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jtype\/jnitype-swift.type.property",
                "title" : "static var jniType: Self",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jtype\/call(_:file:line:function:)",
                "title" : "static func call(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jobject) -> ([jvalue]) throws -> Self.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jtype\/callnonvirtual(_:file:line:function:)",
                "title" : "static func callNonvirtual(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jclass) -> (jobject) -> ([jvalue]) throws -> Self.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jtype\/callstatic(_:file:line:function:)",
                "title" : "static func callStatic(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jclass) -> ([jvalue]) throws -> Self.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jtype\/jvalueof(_:)",
                "title" : "static func jvalueOf(Self.JNIType) -> jvalue",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/kanjivm\/jtype",
            "title" : "JType",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/javaobject\/init(reference:)",
                "title" : "init?(reference: jobject?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/kanjivm\/javaobject\/jcls-2m9o",
                        "title" : "var jcls: jclass",
                        "type" : "property"
                      }
                    ],
                    "title" : "JavaObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/kanjivm\/javaobject\/jcls-5tkdx",
                "title" : "var jcls: jclass",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/javaobject\/cast()",
                "title" : "func cast<T>() -> T?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/javaobject\/castto(_:)",
                "title" : "func castTo<T>(T.Type) -> T?",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/kanjivm\/javaobject\/javaclass-6sja7",
                        "title" : "static var javaClass: jclass!",
                        "type" : "property"
                      }
                    ],
                    "title" : "JavaObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/kanjivm\/javaobject\/javaclass-6zq8w",
                "title" : "static var javaClass: jclass!",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/javaobject\/javaclassname",
                "title" : "static var javaClassName: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/javaobject\/jnitype",
                "title" : "static var jniType: JObjectType",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/javaobject\/createarray(_:)",
                "title" : "static func createArray(JVM) -> ([Self?]) -> jobjectArray?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/javaobject\/getarray(_:)",
                "title" : "static func getArray(JVM) -> (jobjectArray) -> [Self?]?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/javaobject\/jniname()",
                "title" : "static func jniName() -> String",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/kanjivm\/javaobject",
            "title" : "JavaObject",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/init(_:)",
                "title" : "init(JSig)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/elementtype",
                "title" : "let elementType: JSig",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/jsig",
                "title" : "var jsig: String",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/jnibasetype",
                "title" : "JArray.JNIBaseType",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/jnitype-swift.typealias",
                "title" : "JArray.JNIType",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/jnitype-swift.type.property",
                "title" : "static let jniType: JArray",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/call(_:file:line:function:)",
                "title" : "static func call(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jobject) -> ([jvalue]) throws -> JArray.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/callnonvirtual(_:file:line:function:)",
                "title" : "static func callNonvirtual(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jclass) -> (jobject) -> ([jvalue]) throws -> JArray.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/callstatic(_:file:line:function:)",
                "title" : "static func callStatic(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jclass) -> ([jvalue]) throws -> JArray.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/empty()",
                "title" : "static func empty() -> JArray.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/getfield(_:)",
                "title" : "static func getField(JNIEnvPointer) -> (jfieldID) -> (jobject) -> JArray.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/getstaticfield(_:)",
                "title" : "static func getStaticField(JNIEnvPointer) -> (jfieldID) -> (jclass) -> JArray.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/jvalueof(_:)",
                "title" : "static func jvalueOf(JArray.JNIType) -> jvalue",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/setfield(_:)",
                "title" : "static func setField(JNIEnvPointer) -> (jfieldID) -> (jobject) -> (JArray.JNIType) -> Void",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jarray\/setstaticfield(_:)",
                "title" : "static func setStaticField(JNIEnvPointer) -> (jfieldID) -> (jclass) -> (JArray.JNIType) -> Void",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/kanjivm\/jarray",
            "title" : "JArray",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/init(_:)",
                "title" : "init(String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/classname",
                "title" : "let className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/jsig",
                "title" : "var jsig: String",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/jnibasetype",
                "title" : "JObjectType.JNIBaseType",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/jnitype-swift.typealias",
                "title" : "JObjectType.JNIType",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/jnitype-swift.type.property",
                "title" : "static let jniType: JObjectType",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/call(_:file:line:function:)",
                "title" : "static func call(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jobject) -> ([jvalue]) throws -> JObjectType.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/callinit(_:file:line:function:)",
                "title" : "static func callInit(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jclass) -> ([jvalue]) throws -> jobject",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/callnonvirtual(_:file:line:function:)",
                "title" : "static func callNonvirtual(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jclass) -> (jobject) -> ([jvalue]) throws -> JObjectType.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/callstatic(_:file:line:function:)",
                "title" : "static func callStatic(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jclass) -> ([jvalue]) throws -> JObjectType.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/empty()",
                "title" : "static func empty() -> JObjectType.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/getfield(_:)",
                "title" : "static func getField(JNIEnvPointer) -> (jfieldID) -> (jobject) -> JObjectType.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/getstaticfield(_:)",
                "title" : "static func getStaticField(JNIEnvPointer) -> (jfieldID) -> (jclass) -> JObjectType.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/jvalueof(_:)",
                "title" : "static func jvalueOf(JObjectType.JNIType) -> jvalue",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/setfield(_:)",
                "title" : "static func setField(JNIEnvPointer) -> (jfieldID) -> (jobject) -> (JObjectType.JNIType) -> Void",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jobjecttype\/setstaticfield(_:)",
                "title" : "static func setStaticField(JNIEnvPointer) -> (jfieldID) -> (jclass) -> (JObjectType.JNIType) -> Void",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/kanjivm\/jobjecttype",
            "title" : "JObjectType",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvoid\/jsig",
                "title" : "var jsig: String",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvoid\/jnitype-swift.typealias",
                "title" : "JVoid.JNIType",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvoid\/jnitype-swift.type.property",
                "title" : "static let jniType: JVoid",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvoid\/call(_:file:line:function:)",
                "title" : "static func call(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jobject) -> ([jvalue]) throws -> JVoid.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvoid\/callnonvirtual(_:file:line:function:)",
                "title" : "static func callNonvirtual(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jclass) -> (jobject) -> ([jvalue]) throws -> JVoid.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvoid\/callstatic(_:file:line:function:)",
                "title" : "static func callStatic(jmethodID?, file: String, line: Int, function: String) -> (JNIEnvPointer) -> (jclass) -> ([jvalue]) throws -> JVoid.JNIType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvoid\/empty()",
                "title" : "static func empty()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/jvoid\/jvalueof(_:)",
                "title" : "static func jvalueOf(JVoid.JNIType) -> jvalue",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/kanjivm\/jvoid",
            "title" : "JVoid",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/causes",
                "title" : "let causes: [KanjiException]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/classname",
                "title" : "let className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/file",
                "title" : "let file: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/function",
                "title" : "let function: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/line",
                "title" : "let line: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/message",
                "title" : "let message: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/throwable",
                "title" : "let throwable: jthrowable?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/asnserror()",
                "title" : "func asNSError() -> NSError",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjiexception\/createuserinfo()",
                "title" : "func createUserInfo() -> [String : Any]",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/kanjiexception\/errorcode-27y2b",
                    "title" : "var errorCode: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/kanjiexception\/errorcode-7umr3",
                    "title" : "var errorCode: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/kanjiexception\/erroruserinfo-2uu1l",
                    "title" : "var errorUserInfo: [String : Any]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/kanjiexception\/erroruserinfo-7at3d",
                    "title" : "var errorUserInfo: [String : Any]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/kanjiexception\/errordomain-1cvmr",
                    "title" : "static var errorDomain: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/kanjiexception\/errordomain-965ph",
                    "title" : "static var errorDomain: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/kanjivm\/kanjiexception\/customnserror-implementations",
                "title" : "CustomNSError Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/kanjiexception\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/kanjivm\/kanjiexception\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/kanjivm\/kanjiexception",
            "title" : "KanjiException",
            "type" : "struct"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/kanjivm\/jni_detachcurrentthread()",
            "title" : "func JNI_DetachCurrentThread()",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/kanjivm\/jni_onload(_:_:)",
            "title" : "func JNI_OnLoad(UnsafeMutablePointer<JavaVM?>!, UnsafeMutableRawPointer!) -> jint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/kanjivm\/dbg(level:_:_:_:_:_:_:_:_:_:_:_:_:functionname:filename:linenumber:)",
            "title" : "func dbg(level: UInt8, () -> Any?, () -> Any?, () -> Any?, () -> Any?, () -> Any?, () -> Any?, () -> Any?, () -> Any?, () -> Any?, () -> Any?, () -> Any?, () -> Any?, functionName: StaticString, fileName: StaticString, lineNumber: Int)",
            "type" : "func"
          },
          {
            "title" : "Type Aliases",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/kanjivm\/jnienv",
            "title" : "JNIEnv",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jnienvpointer",
            "title" : "JNIEnvPointer",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jninativemethod",
            "title" : "JNINativeMethod",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jboolean",
            "title" : "jboolean",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jbyte",
            "title" : "jbyte",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jchar",
            "title" : "jchar",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jclass",
            "title" : "jclass",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jdouble",
            "title" : "jdouble",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jfloat",
            "title" : "jfloat",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jint",
            "title" : "jint",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jlong",
            "title" : "jlong",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jobject",
            "title" : "jobject",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jshort",
            "title" : "jshort",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jsize",
            "title" : "jsize",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jstring",
            "title" : "jstring",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jthrowable",
            "title" : "jthrowable",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jvalue",
            "title" : "jvalue",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/kanjivm\/jweak",
            "title" : "jweak",
            "type" : "typealias"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjierrors\/general(_:)",
                "title" : "case general(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjierrors\/notfound(_:)",
                "title" : "case notFound(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjierrors\/system",
                "title" : "case system",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/kanjivm\/kanjierrors\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/kanjivm\/kanjierrors\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/kanjivm\/kanjierrors\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/kanjivm\/kanjierrors",
            "title" : "KanjiErrors",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/kanjivm",
        "title" : "KanjiVM",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 0
  }
}